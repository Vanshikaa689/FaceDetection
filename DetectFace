import cv2

# Load the pre-trained Haar Cascade model for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Start video capture (0 is the device index for the default camera)
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()  # Corrected: `ret, frame` instead of `,frame`
    if not ret:
        break  # Exit the loop if the frame was not captured successfully

    gray_image = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)  # Convert to grayscale

    # Detect faces in the grayscale image
    detections = face_cascade.detectMultiScale(gray_image, scaleFactor=1.1, minNeighbors=6)
    #scale factor - increases window size
    #minsize - sizxe of minimum winow
    #max size - size of maximum window
    

    # Draw rectangles around detected faces
    for (x, y, w, h) in detections:
        frame = cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 3)
    
    # Display the resulting frame
    cv2.imshow('img', frame)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
    #if cv2.waitKey(1) == ord('q'):
    #break

# Release the video capture object and close display windows
cap.release()
cv2.destroyAllWindows()
